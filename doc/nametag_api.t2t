NameTag API Reference


%!encoding: utf-8

The NameTag API is defined in header ``nametag.h`` and resides in
``ufal::nametag`` namespace.

The strings used in the NameTag API are always UTF-8 encoded (except from
file paths, whose encoding is system dependent).

++ Struct string_piece ++[string_piece]
```
struct string_piece {
  const char* str;
  size_t len;

  string_piece();
  string_piece(const char* str);
  string_piece(const char* str, size_t len);
  string_piece(const std::string& str);
}
```

The [``string_piece`` #string_piece] is used for efficient string passing. The string
referenced in [``string_piece`` #string_piece] is not owned by it, so users have to make sure
the referenced string exists as long as the [``string_piece`` #string_piece].

++ Struct named_entity ++[named_entity]
```
struct named_entity {
  size_t start;
  size_t length;
  std::string type;

  named_entity();
  named_entity(size_t start, size_t length, const std::string& type);
};
```

The [``named_entity`` #named_entity] is used to represend a named entity. The
``start`` and ``length`` fields represent the entity range in either tokens,
unicode characters or bytes, depending on the usage. The ``type`` represents
the entity type.

++ Class ner ++[ner]
```
class ner {
 public:
  virtual ~ner() {}

  static [ner #ner]* [load #ner_load_cstring](const char* fname);
  static [ner #ner]* [load #ner_load_FILE](FILE* f);

  virtual void [recognize #ner_recognize](const std::vector<[string_piece #string_piece]>& forms, std::vector<[named_entity #named_entity]>& entities) const = 0;

  void [tokenize_and_recognize #ner_tokenize_and_recognize](const char* text, std::vector<[named_entity #named_entity]>& entities, bool unicode_offsets = false) const;
};
```

A [``ner`` #ner] instance represents a named entity recognizer. All methods
are thread-safe.

+++ ner::load(const char*) +++[ner_load_cstring]
``` static [ner #ner]* load(const char* fname);

Factory method constructor. Accepts C string with a file name of the model.
Returns a pointer to an instance of [``ner`` #ner] which the user should delete
after use.

+++ ner::load(FILE*) +++[ner_load_FILE]
``` static [ner #ner]* load(FILE* f);

Factory method constructor. Accepts C file pointer of an opened file with the
model. Returns a pointer to an instance of [``ner`` #ner] which the user should
delete after use.

+++ ner::recognize +++[ner_recognize]
``` virtual void recognize(const std::vector<[string_piece #string_piece]>& forms, std::vector<[named_entity #named_entity]>& entities) const = 0;

Perform named entity recognition on a tokenized sentence given in the ``forms`` argument.
The found entities are returned in the ``entities`` argument. The range of the
returned [named_entity #named_entity] is represented using form indices.


+++ ner::tokenize_and_recognize +++[ner_tokenize_and_recognize]
``` void tokenize_and_recognize(const char* text, std::vector<[named_entity #named_entity]>& entities, bool unicode_offsets = false) const;

Perform named entity recognition on an untokenized text given in the ``text`` argument.
The found entities are returned in the ``entities`` argument. The range of the
returned [named_entity #named_entity] is represented either in Unicode characters
(when ``unicode_offsets == true``), or in UTF-8 bytes (when ``unicode_offset == false``).
