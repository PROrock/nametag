NameTag: Name Entity Recognizer
Version 0.9


Introduction
============

NameTag is an open-source tool for named entity recognition (NER). NameTag
identifies proper names in text and classifies them into predefined categories,
such as names of persons, locations, organizations, etc. NameTag is distributed
as a standalone tool or a library, along with trained linguistic models. In the
Czech language, NameTag achieves state-of-the-art performance (Straková et al.
2013 (http://ufal.mff.cuni.cz/~straka/papers/2013-tsd_ner.pdf)). NameTag is a
free software under LGPL (http://www.gnu.org/licenses/lgpl.html) license and the
linguistic models are free for non-commercial use and distributed under CC
BY-NC-SA (http://creativecommons.org/licenses/by-nc-sa/3.0/) license.


Release
=======


Download
--------

NameTag is currently undergoing beta testing. Please let us know if you wish to
participate. The beta version includes:

- named entity recognizer commandline tool
- Czech models trained on CNEC (http://ufal.mff.cuni.cz/cnec/) 1.1 and 2.0
- C++ library
- Java bindings

NameTag will be available either as pre-compiled binaries and models from
LINDAT-Clarin (http://www.lindat.cz) infrastructure or as open-source from
GitHub (https://github.com/ufal/nametag). If you use this tool for scientific
work, please give credit to us by referencing NameTag website
(http://ufal.mff.cuni.cz/nametag) and Straková et al. 2013
(http://ufal.mff.cuni.cz/~straka/papers/2013-tsd_ner.pdf).


Roadmap
-------

- Jan 2014: NameTag 1.0 release
- Feb 2014: training custom models available
- March 2014: Java, Perl, Python language bindings


License
-------

NameTag is an open-source project and is freely available for non-commercial
purposes. The source code is distributed under LGPL
(http://www.gnu.org/licenses/lgpl.html) and the pre-compiled binaries and the
associated models and data under CC BY-NC-SA
(http://creativecommons.org/licenses/by-nc-sa/3.0/). If you use this tool for
scientific work, please give credit to us by referencing NameTag website
(http://ufal.mff.cuni.cz/nametag) and Straková et al. 2013
(http://ufal.mff.cuni.cz/~straka/papers/2013-tsd_ner.pdf).


Platforms and Requirements
--------------------------

NameTag is available as a standalone tool and as a library for Linux/Windows. It
does not require any additional libraries. As any supervised machine learning
tool, it needs trained linguistic models to perform named entity recognition.
The models for the Czech language are available with the tool.


NameTag Installation
====================

Pre-compiled binaries and models are available from LINDAT-Clarin
(http://www.lindat.cz) infrastructure.

To use the NameTag library, either in C++ or other languages, it must be
compiled manually. The sources are available either at LINDAT-Clarin
(http://www.lindat.cz) or in the GitHub repository
(https://github.com/ufal/nametag).


Requirements
------------

- G++ 4.7 or newer
- make
- SWIG 1.3+ for language bindings other than C++


Compilation
-----------

To compile NameTag on Unix-like systems, run make in the src directory.

Make targets and options:

- exe: compile the binaries (default)
- lib: compile the library
- BITS=32 or BITS=64: compile for specified 32-bit or 64-bit architecture
  instead of the default one
- RELEASE=1: turn off assertions and use LTO
- PROFILE=1: turn on profiling
- DEBUG=1: compile with debug informations and C++ library debugging


Windows
-------

Currently only G++ is supported under Windows. We use TDM-GCC
(http://tdm-gcc.tdragon.net/) for producing Windows builds, but MinGW and Cygwin
are also known to work. If you are interested in adding support for other
compilers (most notably, Visual Studio), let us know.

By default, Unix-like shell is required (i.e., Cygwin or MSYS). If you use
standard Windows Cmd.exe (i.e., TDM-GCC or plain MinGW), use

  make WINCMD=1

Note that make in MinGW is usually distributed as mingw32-make.


Other language bindings
-----------------------


Java
----

To compile Java bindings, run make in the bindings/java directory, optionally
with the described Make options.

The Java installation specified in the environment variable JAVA_HOME is used.
If the environment variable does not exist, the JAVA_HOME can be specified using

  make JAVA_HOME=path_to_Java_installation

Java 6 and newer is supported.


Python
------

To compile Python bindings, run make in the bindings/python directory,
optionally with the described Make options.

Path to the include headers of the required Python version must be specified in
the PYTHON_INCLUDE variable using

  make PYTHON_INCLUDE=path_to_Python_includes

Both Python 2.6+ and Python 3+ are supported.


NameTag User's Manual
=====================

In a natural language text, the task of named entity recognition (NER) is to
identify proper names such as names of persons, organizations and locations.
NameTag recognizes named entities in an unprocessed text using MorphoDiTa
(http://ufal.mff.cuni.cz/morphodita). MorphoDiTa library tokenizes the text and
performs morphologic analysis and tagging and NameTag identifies and classifies
named entities by an algorithm described in Straková et al. 2013
(http://ufal.mff.cuni.cz/~straka/papers/2013-tsd_ner.pdf). NameTag can also
performs NER in custom tokenized and morphologically analyzed and tagged texts.

This section describes the command line tool and the model.


Models
------

Like any supervised machine learning tool, NameTag needs a trained linguistic
model. Czech models trained on CNEC (http://ufal.mff.cuni.cz/cnec/) 1.1 and 2.0
are distributed with the tool. All models are distributed under the CC BY-NC-SA
(http://creativecommons.org/licenses/by-nc-sa/3.0/) licence. Please make sure
you are using the linguistic models in a version corresponding to your NameTag
release. The best way to assure this is to use the most current NameTag release
with the most current model release.


Czech NER - CNEC 1.1
--------------------

The model is trained on the training portion of the Czech Named Entity Corpus
1.1 (http://ufal.mff.cuni.cz/cnec/). The corpus uses a detailed two-level named
entity hierarchy, whose description is available in the documentation of the
[Czech Named Entity Corpus 1.1 http://ufal.mff.cuni.cz/cnec/].


Czech NER - CNEC 2.0
--------------------

The model is trained on the training portion of the Czech Named Entity Corpus
2.0 (http://ufal.mff.cuni.cz/cnec/). The corpus uses a detailed two-level named
entity hierarchy, whose description is available in the documentation of the
[Czech Named Entity Corpus 2.0 http://ufal.mff.cuni.cz/cnec/]. This hierarchy is
an updated version of CNEC 1.1 hierarchy and is more suitable for automatic
named entity recognition.


NameTag Command Line Tool
-------------------------

NameTag command line tool accepts two input formats: an unprocessed, raw text
and a custom tokenized and segmented vertical format. NameTag command line tool
accepts input on standard input and prints to standard output.  All inputs and
outputs are assumed in UTF-8.


Untokenized Input
-----------------

The input is by default automatically tokenized and segmented. In this case, the
output is in XML format without a root element, using <ne type="...">...</ne>
element to encode a named entity.

Example unprocessed text input format:

  Václav Havel byl český dramatik, esejista, kritik komunistického režimu a později politik.

NameTag is run using:

  cat sample.txt | ./run_ner <model>

A NameTag identifies a first name (pf), a surname (ps) and a person name
container (P) in the input:

  <ne type='P'><ne type='pf'>Václav</ne> <ne type='ps'>Havel</ne></ne> byl český dramatik, esejista, kritik komunistického režimu a později politik.


Vertical Input Format
---------------------

For users who wish to perform their own tokenization and segmentation, NameTag
accepts tokenized and segmented text in a CoNLL-style vertical format, where
every word is on a separate line, with empty line representing an end of
sentence.

The output in this case consists of lines representing found named entities.
Each line contains three tab-separated fields: entity_range, entity_type and
entity_text. The entity_range represents the lines of the input file containing
the named entity and entity_type represents its type. The entity_text is not
strictly necessary and contains space separated words of this named entity.

Example input:

  Václav
  Havel
  byl
  ...

NameTag is run using:

  cat sample.txt | ./run_ner -v <model>

Example oupout:

  1,2	P	Václav Havel
  1	pf	Václav
  2	ps	Havel
  ...


NameTag API Reference
=====================

The NameTag API is defined in header nametag.h and resides in ufal::nametag
namespace.

The strings used in the NameTag API are always UTF-8 encoded (except from file
paths, whose encoding is system dependent).


Struct string_piece
-------------------

  struct string_piece {
    const char* str;
    size_t len;
  
    string_piece();
    string_piece(const char* str);
    string_piece(const char* str, size_t len);
    string_piece(const std::string& str);
  }

The string_piece (#string_piece) is used for efficient string passing. The
string referenced in string_piece (#string_piece) is not owned by it, so users
have to make sure the referenced string exists as long as the string_piece
(#string_piece).


Struct named_entity
-------------------

  struct named_entity {
    size_t start;
    size_t length;
    std::string type;
  
    named_entity();
    named_entity(size_t start, size_t length, const std::string& type);
  };

The named_entity (#named_entity) is used to represend a named entity. The start
and length fields represent the entity range in either tokens, unicode
characters or bytes, depending on the usage. The type represents the entity
type.


Class ner
---------

  class ner {
   public:
    virtual ~ner() {}
  
    static ner* load(const char* fname);
    static ner* load(FILE* f);
  
    virtual void recognize(const std::vector<string_piece>& forms, std::vector<named_entity>& entities) const = 0;
  
    void tokenize_and_recognize(const char* text, std::vector<named_entity>& entities, bool unicode_offsets = false) const;
  };

A ner (#ner) instance represents a named entity recognizer. All methods are
thread-safe.


ner::load(const char*)
----------------------

  static ner* load(const char* fname);

Factory method constructor. Accepts C string with a file name of the model.
Returns a pointer to an instance of ner (#ner) which the user should delete
after use.


ner::load(FILE*)
----------------

  static ner* load(FILE* f);

Factory method constructor. Accepts C file pointer of an opened file with the
model. Returns a pointer to an instance of ner (#ner) which the user should
delete after use.


ner::recognize
--------------

  virtual void recognize(const std::vector<string_piece>& forms, std::vector<named_entity>& entities) const = 0;

Perform named entity recognition on a tokenized sentence given in the forms
argument. The found entities are returned in the entities argument. The range of
the returned named_entity (#named_entity) is represented using form indices.


ner::tokenize_and_recognize
---------------------------

  void tokenize_and_recognize(const char* text, std::vector<named_entity>& entities, bool unicode_offsets = false) const;

Perform named entity recognition on an untokenized text given in the text
argument. The found entities are returned in the entities argument. The range of
the returned named_entity (#named_entity) is represented either in Unicode
characters (when unicode_offsets == true), or in UTF-8 bytes (when
unicode_offset == false).


Contact
=======

Authors:

- Milan Straka (http://ufal.mff.cuni.cz/milan-straka), straka@ufal.mff.cuni.cz
- Jana Straková (http://ufal.mff.cuni.cz/jana-strakova),
  strakova@ufal.mff.cuni.cz

NameTag website (http://ufal.mff.cuni.cz/nametag).


Acknowledgements
================

This work has been using language resources developed and/or stored and/or
distributed by the LINDAT-Clarin project of the Ministry of Education of the
Czech Republic (project LM2010013).


References
==========

Straková Jana, Straka Milan, Hajič Jan: A New State-of-The-Art Czech Named
Entity Recognizer (http://ufal.mff.cuni.cz/~straka/papers/2013-tsd_ner.pdf). In:
Lecture Notes in Computer Science, Vol. 8082, Text, Speech and Dialogue: 16th
International Conference, TSD 2013. Proceedings, Copyright © Springer Verlag,
Berlin / Heidelberg, ISBN 978-3-642-40584-6, ISSN 0302-9743, pp. 68-75, 2013


Bibtex for referencing
----------------------

    @inproceedings{biblio:StStANew2013,
      booktitle = {Text, Speech and Dialogue: 16th International Conference, {TSD} 2013. Proceedings},
      series = {Lecture Notes in Computer Science},
      title = {A New State-of-The-Art Czech Named Entity Recognizer},
      editor = {Ivan Habernal and V{\'{a}}clav Matou{\v{s}}ek},
      author = {Jana Strakov{\'{a}} and Milan Straka and Jan Haji{\v{c}}},
      year = {2013},
      publisher = {Springer Verlag},
      organization = {Z{\'{a}}pado{\v{c}}esk{\'{a}} univerzita v Plzni},
      address = {Berlin / Heidelberg},
      venue = {Plze{\v{n}}, hotel Angelo},
      series = {Lecture Notes in Artificial Intelligence},
      volume = {8082},
      pages = {68--75},
      isbn = {978-3-642-40584-6},
      issn = {0302-9743},
    }

